package com.fiveone.edm.util;

import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.net.URLCodec;
import org.htmlparser.Node;
import org.htmlparser.Parser;
import org.htmlparser.tags.ImageTag;
import org.htmlparser.tags.LinkTag;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.SimpleNodeIterator;

import java.util.Random;

public class HtmlParserUtil {	
	
	public static String replaceLinkTag(String htmlContent,String server,String params){
		if(htmlContent == null) return "";
		try {  
		      Parser parser = new Parser();  
		      parser.setInputHTML(htmlContent);
		      parser.setEncoding("UTF-8");  
		      NodeList list = parser.parse(null);  
		      resourseTag(list,server,params);
		      return list.toHtml();
		    } catch (Exception e) {  
		      e.printStackTrace(); 
		      return null;
		    }  
	}

	public static String getCharAndNumr(int length)
	{
		String val = "";

		Random random = new Random();
		for(int i = 0; i < length; i++) {
			// 输出字母还是数字
			String charOrNum = random.nextInt(2) % 2 == 0 ? "char" : "num"; 
			 // 字符串
			if("char".equalsIgnoreCase(charOrNum)) {
				//取得大写字母还是小写字母
				int choice = random.nextInt(2) % 2 == 0 ? 65 : 97; 
				val += (char) (choice + random.nextInt(26));
			}
			// 数字
			else if("num".equalsIgnoreCase(charOrNum)) {
				val += String.valueOf(random.nextInt(10));
			}
		}
		return val;
	}
	
	private static NodeList resourseTag(final NodeList list,final String server,final String params) {
	        if(list==null)  
	            return null;  
	          
	        Node node = null;  
	        URLCodec codec = new URLCodec();
	        SimpleNodeIterator iterator = list.elements();  
	          
	        while(iterator.hasMoreNodes()) {  
	            node = iterator.nextNode();  
	            if(node==null)  
	                break;

	            if(node instanceof LinkTag) {  
	            	LinkTag tag = (LinkTag)node;  
	            	String link = tag.getAttribute("href");
	            	try {
						link =  codec.encode(link);
					} catch (EncoderException e) {
						e.printStackTrace();
					}
	            	String newlink = server + "/edmserver/view?_FORM=" + link + "&_UID=" + params+"&"+getCharAndNumr(6)+"="+getCharAndNumr(8);
	            	tag.setLink(newlink);
	            } 
	            if(node instanceof ImageTag) {
	            	ImageTag img = (ImageTag)node; 
	            	String imgurl = img.getImageURL();
	            	try {
						imgurl =  codec.encode(imgurl);
					} catch (EncoderException e) {
						e.printStackTrace();
					}
	            	String newurl = server + "/edmserver/image?_FORM=" + imgurl + "&_UID=" + params+"&"+getCharAndNumr(6)+"="+getCharAndNumr(8);
	            	img.setImageURL(newurl);
	            }
	            resourseTag(node.getChildren(),server,params);  
	        }  
	          
	        return null;  
	    }  
	    
	    public static void main(String []args){
			 try {  
			 	Parser parser = new Parser();
			    parser.setResource("C:\\Users\\Guy\\Desktop\\email.html");
			    parser.setEncoding("UTF-8");
		        NodeList list = parser.parse(null);
		        resourseTag(list,"http://127.0.0.1:8080","fjg840fk");
		        System.out.println(getCharAndNumr(8));
			      
		    } catch (Exception e) {  
		      e.printStackTrace();  
		    }  
		 }
}
